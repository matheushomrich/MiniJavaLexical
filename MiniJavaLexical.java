// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: MiniJavaLexical.flex

import java.io.InputStreamReader;

@SuppressWarnings("fallthrough")
public class MiniJavaLexical {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\4\0\1\6\1\0\10\5\12\7\1\0\2\5\1\10"+
    "\1\5\2\0\22\11\1\12\7\11\1\5\1\0\1\5"+
    "\1\0\1\11\1\0\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\2\11\1\24\1\25\1\26"+
    "\1\27\1\30\1\11\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\11\1\5\1\0\1\5\7\0"+
    "\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\2\3\1\4\1\3\17\5\1\6"+
    "\1\7\7\5\1\10\22\5\1\11\1\5\1\12\14\5"+
    "\1\13\2\5\1\14\4\5\1\15\1\16\1\17\4\5"+
    "\1\20\1\5\1\21\4\5\1\22\1\23\4\5\1\24"+
    "\1\25\1\26\1\0\1\5\1\27\1\30\1\31\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\2\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\41\0\143\0\41\0\204\0\245"+
    "\0\306\0\347\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad"+
    "\0\u01ce\0\u01ef\0\u0210\0\u0231\0\u0252\0\u0273\0\u0294\0\u02b5"+
    "\0\41\0\41\0\u02d6\0\u02f7\0\u0318\0\u0339\0\u035a\0\u037b"+
    "\0\u039c\0\347\0\u03bd\0\u03de\0\u03ff\0\u0420\0\u0441\0\u0462"+
    "\0\u0483\0\u04a4\0\u04c5\0\u04e6\0\u0507\0\u0528\0\u0549\0\u056a"+
    "\0\u058b\0\u05ac\0\u05cd\0\u05ee\0\347\0\u060f\0\347\0\u0630"+
    "\0\u0651\0\u0672\0\u0693\0\u06b4\0\u06d5\0\u06f6\0\u0717\0\u0738"+
    "\0\u0759\0\u077a\0\u079b\0\347\0\u07bc\0\u07dd\0\347\0\u07fe"+
    "\0\u081f\0\u0840\0\u0861\0\347\0\347\0\347\0\u0882\0\u08a3"+
    "\0\u08c4\0\u08e5\0\347\0\u0906\0\347\0\u0927\0\u0948\0\u0969"+
    "\0\u098a\0\347\0\347\0\u09ab\0\u09cc\0\u09ed\0\u0a0e\0\347"+
    "\0\347\0\347\0\u0a2f\0\u0a50\0\347\0\347\0\347\0\u0a71"+
    "\0\u0a92\0\u0ab3\0\u0ad4\0\u0af5\0\u0b16\0\u0b37\0\u0b58\0\u0b79"+
    "\0\u0b9a\0\u0bbb\0\u0bdc\0\u0bfd\0\u0c1e\0\u0c3f\0\u0c60\0\u0c81"+
    "\0\u0ca2\0\u0cc3\0\u0ce4\0\41\0\347";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\12\1\14\1\15\1\12\1\16"+
    "\1\17\2\12\1\20\1\12\1\21\1\22\1\12\1\23"+
    "\1\24\1\25\1\26\1\12\1\27\1\30\2\12\42\0"+
    "\1\3\41\0\1\4\44\0\1\31\41\0\1\10\41\0"+
    "\1\32\37\0\1\12\1\0\30\12\7\0\1\12\1\0"+
    "\22\12\1\33\4\12\1\34\7\0\1\12\1\0\16\12"+
    "\1\35\11\12\7\0\1\12\1\0\13\12\1\36\14\12"+
    "\7\0\1\12\1\0\13\12\1\37\12\12\1\40\1\12"+
    "\7\0\1\12\1\0\2\12\1\41\25\12\7\0\1\12"+
    "\1\0\7\12\1\42\5\12\1\43\12\12\7\0\1\12"+
    "\1\0\2\12\1\44\25\12\7\0\1\12\1\0\6\12"+
    "\1\45\21\12\7\0\1\12\1\0\20\12\1\46\2\12"+
    "\1\47\4\12\7\0\1\12\1\0\6\12\1\50\21\12"+
    "\7\0\1\12\1\0\22\12\1\51\5\12\7\0\1\12"+
    "\1\0\11\12\1\52\6\12\1\53\7\12\7\0\1\12"+
    "\1\0\16\12\1\54\11\12\7\0\1\12\1\0\11\12"+
    "\1\55\16\12\7\0\1\12\1\0\20\12\1\56\7\12"+
    "\7\0\1\12\1\0\21\12\1\57\6\12\7\0\1\12"+
    "\1\0\16\12\1\60\11\12\7\0\1\12\1\0\2\12"+
    "\1\61\25\12\7\0\1\12\1\0\21\12\1\62\6\12"+
    "\7\0\1\12\1\0\22\12\1\63\5\12\7\0\1\12"+
    "\1\0\13\12\1\64\14\12\7\0\1\12\1\0\22\12"+
    "\1\65\5\12\7\0\1\12\1\0\12\12\1\66\15\12"+
    "\7\0\1\12\1\0\25\12\1\67\2\12\7\0\1\12"+
    "\1\0\12\12\1\70\15\12\7\0\1\12\1\0\3\12"+
    "\1\71\24\12\7\0\1\12\1\0\22\12\1\72\5\12"+
    "\7\0\1\12\1\0\2\12\1\73\25\12\7\0\1\12"+
    "\1\0\12\12\1\74\15\12\7\0\1\12\1\0\23\12"+
    "\1\75\4\12\7\0\1\12\1\0\12\12\1\76\15\12"+
    "\7\0\1\12\1\0\12\12\1\77\15\12\7\0\1\12"+
    "\1\0\12\12\1\100\15\12\7\0\1\12\1\0\22\12"+
    "\1\101\5\12\7\0\1\12\1\0\13\12\1\102\14\12"+
    "\7\0\1\12\1\0\21\12\1\103\6\12\7\0\1\12"+
    "\1\0\6\12\1\104\21\12\7\0\1\12\1\0\6\12"+
    "\1\105\21\12\7\0\1\12\1\0\21\12\1\106\6\12"+
    "\7\0\1\12\1\0\15\12\1\107\12\12\7\0\1\12"+
    "\1\0\24\12\1\110\3\12\7\0\1\12\1\0\13\12"+
    "\1\111\14\12\7\0\1\12\1\0\23\12\1\112\4\12"+
    "\7\0\1\12\1\0\22\12\1\113\5\12\7\0\1\12"+
    "\1\0\21\12\1\114\6\12\7\0\1\12\1\0\6\12"+
    "\1\115\21\12\7\0\1\12\1\0\5\12\1\116\22\12"+
    "\7\0\1\12\1\0\13\12\1\117\14\12\7\0\1\12"+
    "\1\0\15\12\1\120\12\12\7\0\1\12\1\0\6\12"+
    "\1\121\21\12\7\0\1\12\1\0\6\12\1\122\21\12"+
    "\7\0\1\12\1\0\21\12\1\123\6\12\7\0\1\12"+
    "\1\0\15\12\1\124\12\12\7\0\1\12\1\0\6\12"+
    "\1\125\21\12\7\0\1\12\1\0\2\12\1\126\25\12"+
    "\7\0\1\12\1\0\12\12\1\127\15\12\7\0\1\12"+
    "\1\0\20\12\1\130\7\12\7\0\1\12\1\0\12\12"+
    "\1\131\15\12\7\0\1\12\1\0\6\12\1\132\21\12"+
    "\7\0\1\12\1\0\10\12\1\133\17\12\7\0\1\12"+
    "\1\0\14\12\1\134\13\12\7\0\1\12\1\0\2\12"+
    "\1\135\25\12\7\0\1\12\1\0\5\12\1\136\22\12"+
    "\7\0\1\12\1\0\22\12\1\137\5\12\7\0\1\12"+
    "\1\0\4\12\1\140\23\12\7\0\1\12\1\0\15\12"+
    "\1\141\12\12\7\0\1\12\1\0\4\12\1\142\23\12"+
    "\2\143\3\0\2\143\1\144\1\143\30\144\7\0\1\12"+
    "\1\0\15\12\1\145\12\12\7\0\1\12\1\0\21\12"+
    "\1\146\6\12\7\0\1\12\1\0\6\12\1\147\21\12"+
    "\27\0\1\150\20\0\1\12\1\0\16\12\1\151\11\12"+
    "\34\0\1\152\13\0\1\12\1\0\23\12\1\153\4\12"+
    "\33\0\1\154\14\0\1\12\1\0\22\12\1\155\5\12"+
    "\2\156\3\0\36\156\3\0\2\156\1\157\1\156\30\157"+
    "\30\0\1\160\17\0\1\12\1\0\17\12\1\161\10\12"+
    "\31\0\1\162\16\0\1\12\1\0\20\12\1\163\7\12"+
    "\23\0\1\164\24\0\1\12\1\0\12\12\1\165\15\12"+
    "\26\0\1\166\21\0\1\12\1\0\15\12\1\167\12\12"+
    "\33\0\1\170\14\0\1\12\1\0\22\12\1\171\5\12"+
    "\24\0\1\172\23\0\1\12\1\0\13\12\1\173\14\12"+
    "\26\0\1\174\21\0\1\12\1\0\15\12\1\175\12\12";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3333];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\22\1\2\11"+
    "\110\1\1\0\4\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

public static int IDENT		= 257;
public static int NUM			= 258;

public static int IF 			= 259; 
public static int ELSE 		= 260;
public static int PUBLIC 	= 261;
public static int PRIVATE = 262;
public static int CLASS		= 263;
public static int EQUALS	= 264;

public static int NEW	    = 265;
public static int THIS	  = 266;
public static int BOOLEAN	= 267;
public static int WHILE	  = 268;
public static int RETURN	= 269;
public static int TRUE	  = 270;
public static int FALSE	  = 271;
public static int INT	    = 272;
public static int STATIC	= 273;
public static int SOUT	  = 274;
public static int VOID	  = 275;
public static int MAIN	  = 276;
public static int STRING	= 277;
public static int EXTENDS	= 278;
public static int AND	    = 279;

/**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    MiniJavaLexical scanner;
    if (argv.length == 0) {
      try {        
          // scanner = new MiniJavaLexical( System.in );
          scanner = new MiniJavaLexical( new InputStreamReader(System.in) );
          while ( !scanner.zzAtEOF ) 
	        System.out.println("token: "+scanner.yylex()+"\t<"+scanner.yytext()+">");
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        scanner = null;
        try {
          scanner = new MiniJavaLexical( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) 	
                System.out.println("token: "+scanner.yylex()+"\t<"+scanner.yytext()+">");
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiniJavaLexical(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println(yyline+1 + ": caracter invalido: "+yytext());
            }
          // fall through
          case 27: break;
          case 2:
            { 
            }
          // fall through
          case 28: break;
          case 3:
            { return yytext().charAt(0);
            }
          // fall through
          case 29: break;
          case 4:
            { return NUM;
            }
          // fall through
          case 30: break;
          case 5:
            { return IDENT;
            }
          // fall through
          case 31: break;
          case 6:
            { return AND;
            }
          // fall through
          case 32: break;
          case 7:
            { return EQUALS;
            }
          // fall through
          case 33: break;
          case 8:
            { return IF;
            }
          // fall through
          case 34: break;
          case 9:
            { return INT;
            }
          // fall through
          case 35: break;
          case 10:
            { return NEW;
            }
          // fall through
          case 36: break;
          case 11:
            { return ELSE;
            }
          // fall through
          case 37: break;
          case 12:
            { return MAIN;
            }
          // fall through
          case 38: break;
          case 13:
            { return THIS;
            }
          // fall through
          case 39: break;
          case 14:
            { return TRUE;
            }
          // fall through
          case 40: break;
          case 15:
            { return VOID;
            }
          // fall through
          case 41: break;
          case 16:
            { return CLASS;
            }
          // fall through
          case 42: break;
          case 17:
            { return FALSE;
            }
          // fall through
          case 43: break;
          case 18:
            { return WHILE;
            }
          // fall through
          case 44: break;
          case 19:
            { return STRING;
            }
          // fall through
          case 45: break;
          case 20:
            { return PUBLIC;
            }
          // fall through
          case 46: break;
          case 21:
            { return RETURN;
            }
          // fall through
          case 47: break;
          case 22:
            { return STATIC;
            }
          // fall through
          case 48: break;
          case 23:
            { return BOOLEAN;
            }
          // fall through
          case 49: break;
          case 24:
            { return EXTENDS;
            }
          // fall through
          case 50: break;
          case 25:
            { return PRIVATE;
            }
          // fall through
          case 51: break;
          case 26:
            { return SOUT;
            }
          // fall through
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
